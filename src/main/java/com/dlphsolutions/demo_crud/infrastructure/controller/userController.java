package com.dlphsolutions.demo_crud.infrastructure.controller;

import com.dlphsolutions.demo_crud.infrastructure.exception.UserServiceException;
import com.dlphsolutions.demo_crud.domain.model.User;
import com.dlphsolutions.demo_crud.application.service.UserService;
import com.dlphsolutions.demo_crud.util.ApiResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/users")
@Tag(name = "Users", description = "Operations pertaining to users")
public class userController {
    @Autowired
    private UserService service;
    private final BCryptPasswordEncoder passwordEncoder;

    public userController(BCryptPasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
    }

    @Operation(summary = "Create User; The ID field is not required, it is autogenerated")
    @PostMapping("/create")
    public ResponseEntity<?> createUser(@Valid @RequestBody User user){
        if (user.getId() != null) {
            return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST, "ID must not be provided during creation", null));
        }
        try {
            user.setId(null);
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            User newUser = service.saveUser(user);
            return ResponseEntity.status(HttpStatus.CREATED).body(new ApiResponse<>(HttpStatus.CREATED, "User Created successfully", newUser.getUser())) ;
        } catch (UserServiceException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(new ApiResponse<>(HttpStatus.CONFLICT, "User already exists", null));
        } catch (Exception e){
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ApiResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, "Internal server error" + e.getMessage(), null));
        }
    }
}

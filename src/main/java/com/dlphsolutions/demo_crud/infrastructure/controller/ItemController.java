package com.dlphsolutions.demo_crud.infrastructure.controller;

import com.dlphsolutions.demo_crud.domain.model.Item;
import com.dlphsolutions.demo_crud.application.service.ItemService;
import com.dlphsolutions.demo_crud.util.ApiResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/items")
@Tag(name = "Items", description = "Operations pertaining to items")
public class ItemController {
    @Autowired
    private ItemService service;

    @Operation(summary = "Get all items")
    @Parameter(name = "token", description = "token")//revisar
    @GetMapping
    public ResponseEntity<?> getAllItems(){
        List<Item> items = service.getAllItems();
        return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK, "Items retrieved successfully", items));
    }

    @Operation(summary = "Get item by ID")
    @GetMapping("/{id}")
    public ResponseEntity<?> getItemById(@PathVariable String id){
        Optional<Item> itemData = service.getItemById(id);
        if(itemData.isPresent()){
            return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK, "Item retrieved successfully", itemData.get()));
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse<>(HttpStatus.NOT_FOUND, "Item not found", null));
        }
    }

    @Operation(summary = "Get item by state")
    @GetMapping("/state/")
    public ResponseEntity<?> getItemByState(@RequestParam Boolean state){
        List<Item> items = service.getItemByState(state);
        return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK,"Items retrieved successfully", items));
    }

    @Operation(summary = "Create new item; The ID field is not required, it is autogenerated")
    @PostMapping("/create")
    public ResponseEntity<?> createItem(@Valid @RequestBody Item item){
        if (item.getId() != null) {
            return ResponseEntity.badRequest().body(new ApiResponse<>(HttpStatus.BAD_REQUEST, "ID must not be provided during creation", null));
        }
        Item newItem = service.saveItem(item);
        return ResponseEntity.status(HttpStatus.CREATED).body(new ApiResponse<>(HttpStatus.CREATED, "Item created successfully", newItem));
    }

    @Operation(summary = "Update item; The ID field is not required")
    @PutMapping("/update/{id}")
    public ResponseEntity<?> updateItem(@PathVariable String id, @Valid @RequestBody Item item){
        Item updateItem = service.updateItem(id, item);
        return ResponseEntity.ok().body(new ApiResponse<>(HttpStatus.OK, "Item updated successfully", updateItem));
    }

    @Operation(summary = "Delete item")
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deleteItem(@PathVariable String id){
        service.deleteItem(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).body(new ApiResponse<>(HttpStatus.NO_CONTENT, "Item deleted successfully", null));
    }
}
